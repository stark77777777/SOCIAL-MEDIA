# -*- coding: utf-8 -*-
"""SOCIAL NETWORK ASSIGNMENT 1[MUJEEB 2105A42021]

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sboWL9lvxif1TE7kp_pB_JyqUJXpnGjz

MOUNT GOOGLE **DRIVE**
"""

from google.colab import drive
drive.mount('/content/drive')

"""**import** **required** **libraries**"""

import numpy as np
import math as mt
import random
import pandas as pd

"""**load** **data**"""

social = pd.read_csv("/content/Social_Network_Ads (1).csv")
social.head()

"""**checking** **for** **null** **values**"""

print(social.info())

"""# satisrical **informtion** **for** **data** """

print(social.describe())

"""# **binary** **conversion**"""

# Converting the categorical variable into numerical
varlist =  ['Gender']

# Defining the map function
def binary_map(x):
    return x.map({'Female': 1, 'Male': 0})

# Applying the function to the housing list
social[varlist] = social[varlist].apply(binary_map)

# Check the housing dataframe now
social

"""# **categorical conversion**"""

status = pd.get_dummies(social['Social Media'], drop_first = True)


social = pd.concat([social, status], axis = 1)


social.drop(['Social Media'], axis = 1, inplace = True)

social

"""# **outliners detection**"""

def detect_outliers_zscore(data):
    outliers = []
    thres = 1
    mean = np.mean(data)
    std = np.std(data)
    #print(mean, std)
    for i in data:
        #print(i)
        z_score = (i-mean)/std
        if (np.abs(z_score) > thres):
            outliers.append(i)
    return outliers# Driver code

sample_outliers_Age = detect_outliers_zscore(social['Age']) 
print("Outliers in Age column from Z-scores method: ", sample_outliers_Age)

from scipy.stats import zscore
z1=np.abs(zscore(social['Age']))
social['Zscore_Age']=z1
outliers_Age=len(social[social['Zscore_Age']>3])
data_z = social[social['Zscore_Age']<3]
social=data_z.drop(['Zscore_Age'], axis=1)
social

"""# MISSING VALUES TRATMENT

# **NEW** **SELECTION**
"""

print(social.isnull().sum())

"""# **DATA NORMALIZATION**"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
social_norm = scaler.fit_transform(social)
social_norm

"""# **DATA SPLIT**"""

from sklearn.model_selection import train_test_split
dataframe = social.values
X, y = dataframe[:, :-1], dataframe[:, -1]
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 10)
x_train

"""# **THANK YOU**"""